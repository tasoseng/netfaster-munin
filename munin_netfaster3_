#!/usr/bin/env python3

import sys
import os
import json

defects_dict={
    "ipfc": "Interleaved Path FEC Correction",
    "fpce": "Fast Path CRC Error",
    "ipce": "Interleaved Path CRC Error",
    "lsd": "Loss of Signal Defect",
    "fphes": "Fast Path HEC Error STR",
    "iphe": "Interleaved Path HEC Error",
    "eps": "Error Per Sec.",
}

def fetch_data():
    f = open("/var/log/netfaster3.data", "r")
    jdata = json.loads(f.read())
    f.close()
    return (jdata["rate"], jdata["defects"])

def print_config(plugin_type):
    if plugin_type == "rate":
        print("graph_title Actual Data Rate")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel KBps")
        print("graph_scale no")
        print("graph_category ADSL")
        print("down.label Downstream")
        print("down.draw LINE")
        print("down.colour 00FF00")
        print("up.label Upstream")
        print("up.draw LINE")
        print("up.colour FF0000")

    elif plugin_type == "attenuation":
        print("graph_title Attenuation")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel dB")
        print("graph_scale no")
        print("graph_category ADSL")
        print("down.label Downstream")
        print("down.draw LINE")
        print("down.colour 00FF00")
        print("up.label Upstream")
        print("up.draw LINE")
        print("up.colour FF0000")

    elif plugin_type == "noise":
        print("graph_title Noise Margin")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel dB")
        print("graph_scale no")
        print("graph_category ADSL")
        print("down.label Downstream")
        print("down.draw LINE")
        print("down.colour 00FF00")
        print("up.label Upstream")
        print("up.draw LINE")
        print("up.colour FF0000")

    elif plugin_type == "power":
        print("graph_title Output Power")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel dBm")
        print("graph_scale no")
        print("graph_category ADSL")
        print("near.label Near End Indicator")
        print("near.draw LINE")
        print("near.colour 00FF00")
        print("far.label Far End Indicator")
        print("far.draw LINE")
        print("far.colour FF0000")

    elif plugin_type in defects_dict.keys():
        print("graph_title %s" % defects_dict[plugin_type])
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel %s" % defects_dict[plugin_type])
        print("graph_scale no")
        print("graph_category ADSL")
        print("near.label Near End Indicator")
        print("near.draw LINE")
        print("near.colour 00FF00")
        print("far.label Far End Indicator")
        print("far.draw LINE")
        print("far.colour FF0000")

plugin_name = list(os.path.split(sys.argv[0]))[1]
plugin_type = plugin_name.split('_')[-1]

if len(sys.argv) > 1:
    if sys.argv[1] == "config":
        print_config(plugin_type)
        sys.exit(0)
    elif sys.argv[1] == "suggest":
        print('rate')
        print('attenuation')
        print('noise')
        print('power')
        for k in defects_dict.keys():
            print(k)
        sys.exit(0)

rate, defects = fetch_data()
if plugin_type == "rate":
    print("up.value %s" % rate['Upstream'][:-8])
    print("down.value %s" % rate['Downstream'][:-8])
elif plugin_type == "attenuation":
    print("up.value %s" % defects['Attenuation'][0][:-3])
    print("down.value %s" % defects['Attenuation'][1][:-3])
elif plugin_type == "noise":
    print("up.value %s" % defects['Noise Margin'][0][:-3])
    print("down.value %s" % defects['Noise Margin'][1][:-3])
elif plugin_type == "power":
    print("near.value %s" % defects['Output Power'][0][:-3])
    print("far.value %s" % defects['Output Power'][1][:-3])

elif plugin_type in defects_dict.keys():
    print("near.value %s" % defects[defects_dict[plugin_type]][0])
    print("far.value %s" % defects[defects_dict[plugin_type]][1])
